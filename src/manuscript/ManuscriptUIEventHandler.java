package manuscript;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Handles all events generated by Manuscript.
 * 
 * @author RAM
 * @version 1.0
 * @created 04-Jan-2010 7:16:49 AM
 * 
 * @version 2.2
 * @since 09/3/2011 - Menu items for measures put into here.
 * 
 * @since 09/14/2011 - Added check boxes in the popup menu to toggle visibility
 *        of UIs (tab, staff, lyric, etc.)
 */
public class ManuscriptUIEventHandler implements ActionListener,
		ChangeListener, MouseListener, MouseMotionListener {

	/**
	 * Instance of Manuscript.
	 */
	private Manuscript parent;
	private boolean isClosed = false;

	private JMenuItem itemRenameMeasure;
	private JMenuItem itemDeleteMeasure;
	private JMenuItem itemCopyMeasure;

	private JCheckBoxMenuItem itemShowTab;
	private JCheckBoxMenuItem itemShowTranspose;
	private JCheckBoxMenuItem itemShowNotepad;
	private JCheckBoxMenuItem itemShowLyric;
	private JCheckBoxMenuItem itemShowStaff;

	private JPopupMenu menuPopUp = null;

	/**
	 * Constructor.
	 * 
	 * @param manuscript
	 */
	public ManuscriptUIEventHandler(Manuscript manuscript) {
		this.parent = manuscript;
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		parent.updateSelectedTab();
		if (e.getSource() instanceof JTabbedPane) {
			if (parent.getTabCount() > 0 && isClosed != true) {
				parent.notifyObservers();
			}
		}
	}

	/**
	 * Sets the 'closed' flag.
	 * 
	 * @param b
	 */
	public void setClosed(boolean b) {
		isClosed = b;
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		if (e.getButton() == MouseEvent.BUTTON3) {
			createPopUpMenu();
			parent.firstIndex = parent.tabbedPane.getSelectedIndex();
			menuPopUp.show(e.getComponent(), e.getX(), e.getY());
		}
	}

	@Override
	public void mouseEntered(MouseEvent e) {

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {

	}

	@Override
	public void mouseReleased(MouseEvent e) {

	}

	@Override
	public void mouseDragged(MouseEvent e) {
		parent.firstIndex = parent.tabbedPane.getSelectedIndex();

		// the Y coordinate just needs to be greater than 0 and below
		// the height of the tab. It's a relative number.
		parent.lastIndex = parent.tabbedPane.getUI().tabForCoordinate(
				parent.tabbedPane, e.getX(), 5);

		if (parent.lastIndex != -1) {
			parent.moveMeasure();
			parent.tabbedPane.setSelectedIndex(parent.lastIndex);
		}

	}

	@Override
	public void actionPerformed(ActionEvent event) {
		if (event.getSource() instanceof JMenuItem) {

			JMenuItem source = (JMenuItem) event.getSource();

			if (source == itemRenameMeasure) {
				int index = parent.getSelectedTab();
				String currentName = parent.getMeasureName(index);
				String name = (String) JOptionPane.showInputDialog(
						parent.parent, null, "Currently: " + currentName,
						JOptionPane.QUESTION_MESSAGE, null, null, currentName);
				if (name == null) {
				} else {
					parent.setMeasureName(index, name);
				}
			}
			if (source == itemCopyMeasure) {
				if (parent.getTabCount() == 0) {
				} else {
					int index = parent.getSelectedTab();
					String currentName = parent.getMeasureName(index);
					String name = (String) JOptionPane.showInputDialog(
							parent.parent, null, "Currently: " + currentName,
							JOptionPane.QUESTION_MESSAGE, null, null,
							currentName);
					if (name == null) {
					} else {
						parent.copyMeasure(index, name);
					}
				}
			}
			if (source == itemDeleteMeasure) {
				if (parent.getTabCount() == 0) {
				} else {
					if (JOptionPane.showConfirmDialog(
							parent.parent,
							"Are you sure you want to delete this measure?",
							"Delete: "
									+ parent.getMeasureName(parent
											.getSelectedTab()),
							JOptionPane.YES_NO_OPTION,
							JOptionPane.QUESTION_MESSAGE, null) == JOptionPane.YES_OPTION) {
						parent.deleteMeasure(parent.getSelectedTab());
					} else {
					}
				}
			}
		}

		if (event.getSource() instanceof JCheckBoxMenuItem) {
			JCheckBoxMenuItem source = (JCheckBoxMenuItem) event.getSource();

			if (source == itemShowStaff) {
				if (itemShowStaff.isSelected()) {
					parent.getStaffUIFromMeasure(parent.getSelectedTab())
							.setVisible(true);
				} else {
					parent.getStaffUIFromMeasure(parent.getSelectedTab())
							.setVisible(false);
				}
			}
			if (source == itemShowTab) {
				if (itemShowTab.isSelected()) {
					parent.getTablatureUIFromMeasure(parent.getSelectedTab())
							.setVisible(true);
				} else {
					parent.getTablatureUIFromMeasure(parent.getSelectedTab())
							.setVisible(false);
				}
			}
			if (source == itemShowTranspose) {
				if (itemShowTranspose.isSelected()) {
					parent.getTransposeUIFromMeasure(parent.getSelectedTab())
							.setVisible(true);
				} else {
					parent.getTransposeUIFromMeasure(parent.getSelectedTab())
							.setVisible(false);
				}
			}
			if (source == itemShowNotepad) {
				if (itemShowNotepad.isSelected()) {
					parent.getTablatureTextUI(parent.getSelectedTab())
							.setVisible(true);
				} else {
					parent.getTablatureTextUI(parent.getSelectedTab())
							.setVisible(false);
				}
			}
			if (source == itemShowLyric) {
				if (itemShowLyric.isSelected()) {
					parent.getLyricUIFromMeasure(parent.getSelectedTab())
							.setVisible(true);
				} else {
					parent.getLyricUIFromMeasure(parent.getSelectedTab())
							.setVisible(false);
				}
			}
		}
	}

	/**
	 * Creates the pop-up menu upon clicking.
	 */
	private void createPopUpMenu() {
		menuPopUp = new JPopupMenu();

		itemRenameMeasure = new JMenuItem("Rename");
		itemRenameMeasure.addActionListener(this);
		menuPopUp.add(itemRenameMeasure);

		itemCopyMeasure = new JMenuItem("Copy");
		itemCopyMeasure.addActionListener(this);
		menuPopUp.add(itemCopyMeasure);

		menuPopUp.addSeparator();

		itemDeleteMeasure = new JMenuItem("Delete");
		itemDeleteMeasure.addActionListener(this);
		menuPopUp.add(itemDeleteMeasure);

		menuPopUp.addSeparator();

		itemShowTab = new JCheckBoxMenuItem("Show Tab");
		itemShowTab.setSelected(parent.getTablatureUIFromMeasure(
				parent.getSelectedTab()).isVisible());
		itemShowTab.addActionListener(this);
		menuPopUp.add(itemShowTab);

		itemShowTranspose = new JCheckBoxMenuItem("Show Notes");
		itemShowTranspose.setSelected(parent.getTransposeUIFromMeasure(
				parent.getSelectedTab()).isVisible());
		itemShowTranspose.addActionListener(this);
		menuPopUp.add(itemShowTranspose);

		itemShowNotepad = new JCheckBoxMenuItem("Show Text");
		itemShowNotepad.setSelected(parent.getTablatureTextUI(
				parent.getSelectedTab()).isVisible());
		itemShowNotepad.addActionListener(this);
		menuPopUp.add(itemShowNotepad);

		itemShowLyric = new JCheckBoxMenuItem("Show Lyrics");
		itemShowLyric.setSelected(parent.getLyricUIFromMeasure(
				parent.getSelectedTab()).isVisible());
		itemShowLyric.addActionListener(this);
		menuPopUp.add(itemShowLyric);

		itemShowStaff = new JCheckBoxMenuItem("Show Staff");
		itemShowStaff.setSelected(parent.getStaffUIFromMeasure(
				parent.getSelectedTab()).isVisible());
		itemShowStaff.addActionListener(this);
		menuPopUp.add(itemShowStaff);
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}